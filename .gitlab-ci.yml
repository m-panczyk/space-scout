image: barichello/godot-ci:4.4.1

stages:
  - export
  - deploy

variables:
  EXPORT_NAME: Space_Scout
  CONTAINER_NAME: spacescout-web
  HOST_SERVER: your-server-hostname  # Change this to your actual server hostname

before_script:
  - mkdir -v -p build/linux
  - mkdir -v -p build/windows
  - mkdir -v -p build/mac
  - mkdir -v -p build/web
  - mkdir -v -p build/android

linux:
  stage: export
  script:
    - godot --headless --verbose --export-release "Linux" ./build/linux/$EXPORT_NAME.x86_64
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/linux

windows:
  stage: export
  script:
    - godot --headless --verbose --export-release "Windows Desktop" ./build/windows/$EXPORT_NAME.exe
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/windows

mac:
  stage: export
  script:
    - godot --headless --verbose --export-release "macOS" ./build/mac/$EXPORT_NAME.zip
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/mac

android:
  stage: export
  script:
    - godot --headless --verbose --export-release "Android" ./build/android/$EXPORT_NAME.apk
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/android

web:
  stage: export
  script:
    - godot --headless --verbose --export-release "Web" ./build/web/index.html
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/web

deploy:
  stage: deploy
  image: docker:24.0.5-git
  services:
    - name: docker:24.0.5-dind
      alias: docker
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: tcp://192.168.66.100:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  dependencies:
    - web
    - linux
    - windows
    - mac
    - android
  before_script:
    - apk add --no-cache bash curl openssh-client
    - docker info
  script:
    # Check if container exists and is running
    - |
      if ! docker ps -a | grep -q $CONTAINER_NAME; then
        echo "Container $CONTAINER_NAME not found. Setting up the environment first."
        
        # Create SSL certificates if they don't exist
        if ! docker volume ls | grep -q spacescout-ssl; then
          docker volume create spacescout-ssl
          docker run --rm -v spacescout-ssl:/ssl alpine sh -c "
            apk add --no-cache openssl && 
            mkdir -p /ssl && 
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /ssl/privkey.pem \
              -out /ssl/cert.pem \
              -subj '/CN=spacescout.home'
          "
        fi
        
        # Create data volume if it doesn't exist
        if ! docker volume ls | grep -q spacescout-data; then
          docker volume create spacescout-data
        fi
        
        # Copy nginx.conf to the current directory
        cat > nginx.conf << EOF
server {
    listen 80;
    server_name spacescout.home;
    
    # Redirect HTTP to HTTPS
    location / {
        return 301 https://\$host:8443\$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name spacescout.home;
    
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files \$uri \$uri/ /index.html;
    }
    
    location /downloads/ {
        alias /usr/share/nginx/html/downloads/;
        autoindex on;
        autoindex_exact_size off;
        autoindex_format html;
        autoindex_localtime on;
    }
}
EOF
        
        # Start container
        docker run -d \
          --name $CONTAINER_NAME \
          --restart always \
          -p 8443:443 \
          -p 8080:80 \
          -v spacescout-data:/usr/share/nginx/html \
          -v spacescout-ssl:/etc/nginx/ssl \
          -v $(pwd)/nginx.conf:/etc/nginx/conf.d/default.conf:ro \
          nginx:alpine
      fi
    
    # Create temporary directory
    - mkdir -p /tmp/artifacts
    
    # Copy all build artifacts to temporary directory
    - cp -R build/* /tmp/artifacts/
    
    # Create downloads directory if it doesn't exist
    - docker exec $CONTAINER_NAME mkdir -p /usr/share/nginx/html/downloads
    
    # Copy web build to nginx root
    - tar -C /tmp/artifacts/web -cf - . | docker exec -i $CONTAINER_NAME tar -C /usr/share/nginx/html -xf -
    
    # Copy other builds to downloads directory
    - for dir in linux windows mac android; do
    -   if [ -d "/tmp/artifacts/$dir" ]; then
    -     echo "Copying $dir build..."
    -     docker exec $CONTAINER_NAME mkdir -p /usr/share/nginx/html/downloads/$dir
    -     tar -C /tmp/artifacts/$dir -cf - . | docker exec -i $CONTAINER_NAME tar -C /usr/share/nginx/html/downloads/$dir -xf -
    -   fi
    - done
    
    # Verify files were copied
    - docker exec $CONTAINER_NAME ls -la /usr/share/nginx/html
    - docker exec $CONTAINER_NAME ls -la /usr/share/nginx/html/downloads
    
    # Output access information
    - echo "Game web build is now available at https://spacescout.home:8443"
    - echo "Download all builds at https://spacescout.home:8443/downloads/"
  only:
    - master
